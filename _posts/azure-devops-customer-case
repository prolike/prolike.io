Examples of deliverables - 5 weeks
Pipelines as code - convert all pipelines (.eg. from TeamCity or jenkins ) to become actual version controlled code, in the form of a YAML file that can be run by Azure Pipelines
Self-contained repositories - By self-contained we refer to the fact that builds and tests do not actually depend on the azure-pipelines. A developer is able to run the same build and unit tests locally, as the azure-pipeline does. This is achieved by optimizing the solution (.sln) and project (.proj) files, which defines the builds and deliveries and by optimizing local scripts to run on input parameters instead of hard coded settings with named dependencies.
Programmable immutable infrastructure  - The infrastructure can be spun up in single digit numbers of seconds and they can be countless in instances. We're using a combination of docker containers on both windows and linux to achieve this as well as Azure hosted images. The programmable infrastructure is available for builds, unittests and the part of the end-to-end tests that can run headless (no GUI) and which doesn't have dependencies on attached devices.
Optimization of checkout/clone through caches - The various steps in the pipelines run as individual sessions which means that code checkout must be established by each individual step. This is how a serverless (BaaS) environment works, to avoid doing the long VCS checkout/clone (30+ seconds) in each step, the pipeline is optimized by utilizing caches on the Azure backend. It means we can reuse a checkout in the time it takes to mount a drive on Azure ...counted in milliseconds.
Artifacts are managed - We have introduced an artifact management system (Nuget Gallery + Universal packages), and have changed each build that's run by the pipeline, so that it delivers it's derived objects to the artifact management system for other processes to reuse.
Break down the monolith - Several repositories have been split into their own new repositories. This constitutes a PoC that can easily be repeated: Each deliverable should be individually releasable. it makes the build process even more smooth and nimble.
Build avoidance - Several projects (solutions) are building other projects again, simply because they constirute dependencies. This is a lazy approach that has to do with simplifying dependency management, and each job simply builds what it needs for itself. We have added sufficient dependency management (paket and nuget dependencies) and then changed this process, so each component is now individually releaseable and pulls all dependencies from the artifact management system, not just 3rd party dependencies but even in-house made dependencies.
Semantic versioning - all artifacts are now marked by tags honoring the semver concept, which means that dependencies between projects can be defined as regular expressions keywords and wildcards.

Stuff we have on  the horizon

VM's and physical machines as code -  We need Physical Machines with actual devices attached to accommodate all end-to-end test scenarios. This will be automated as we will using technologies like Puppet or Ansible to create a programmable and immutable infrastructure even on these clients.
Create dashboards - to summarize each repo current state it should have a dedicated dashboard, we'll use MS flow and Power BI to gather and report the data in Azure Devops.
Connect VM's and Physical machines as agents - All this machinery must be attached to Azure, so it alle becomes available as resources to Azure pipelines.
GitOps - Different parts of the various pipelines should be triggered differently, dependent on if the build is relevant for development, integration , stage release of market release. This condition can easily be defined by branching strategies in git, in combination with release definitions, and it's obvious that these different conditions should be made to trigger different flows. (this is often referred to as GitOps).
Digitally signed commits in git - git supports that the commits can be digitally signed. Approved, stable builds should digitally sign the code, while unstable commits should not.
Signed releases - Signing, not only the code, but also the derived objects could be made part of GitOps, only signing for production, if all dependencies in the build, are digitally signed, including the source code as mentioned above. It would then literally be impossible to release something to market, unless all parts and building blocks in the equation are actually signed. This approach is yummy, for QA and regulated environments. (makes it easier to prove that it's working as intended).
Digitally sign external dependencies - The hierarchy of digitally signed components could be extended to include even the external 3rd party dependencies (paket+nuget dependencies).
Take all dependencies to artifact management system - some binary dependencies actually live inside the git repos, these should all be maintained in the artifact management system. The Version Control System should not contain binaries - ever. This is especially true for distributed VCS like git.
Creating a similar pipeline for Embedded SW team - Even embedded SW and HW design should work by the concept of pipelines .
Build an emulator - An emulator to optimize the build and test quite dramatically - I've been working in this field before and would like to take responsibility in this field too if needed
Automate Continuous Delivery - using Kuberntes for the containers and potentially frameworks like Spinnaker og Harness.io for all kinds of automated deploys
I have 20 years of experience automating pipelines like this, at the customer I've described here, my assignment is to know what is possible, and to implement this in steps of fast paced increments, but without jeopardizing the quality: We can take technical dept out of the solution, but we can not make dirty solutions that adds technical depth.

We are determined to Do The Right Thing - while being fast.

The first two weeks were exploratory by nature and I was on site three full days per week. After 3 weeks timer we had picked up a lot of speed in our work processes and since that period I have only been onsite 2 days from morning to lunch to spare with the team, answer questions and adjust the course of direction.

I could see some variant of a similar setup work for you too.

How Lars and the yipees from Prolike can participate in the future.

The following options are not necessarily mutually exclusive.
Help you recruit - I can offer you to reach out to my extended network and present you with candidates for interview, for the purpose of full time employment. I've created the Continuous Delivery Conference and hosted it since 2015, Before that I formed the Jenkins Community in Denmark. I've hosted double-digit numbers of DevOps and automation related Meetups throughout all of Scandinavia. I've been speaking at conferences regularly for the past 20 years and during the same period offered free pro bono teaching at universities, I have employed more than 70 people myself through my time in Praqma and Prolike. I can find and spot the DevOps talent you need.
Load: No-cure, no-pay
Cost: If you hire a candidate I present you, I'll take the equivalent of 4 months salary of the new employee. (Not including DK VAT)
Product Owner and Facilitator - I can take the ownership of your DevOps journey and lead the team to it's goal. Through close collaboration with your management I'll steer the project where you want it to end, utilizing as many as possible, of you own employees.
Load: 20-80 per month, More in the beginning, less as the team grows to become self-confident and self-managed.
Cost: DKK 2100 per hour (not including DK VAT)
Extend the team with yippes - Yipee is the nickname we use for employees in Prolike: Young Independent Professionals - The yipees knows lean software development and DevOps, they might not know C and C++, and there might well be other blank spot in your current technology stack, but they do know infrastructure as code, pipelines as configuration, automation etc. Currently I don't have a full-time yipee to spare for your project, but if you wish to pursue this option let me know, I might try to engage some of our prospects and hangorounds.
Load: Full-time is the equivalent of 100-120 hrs/Month
Cost: DKK 600/hr on full time assignments, 650/hr on less-than-full-time assignments. BONUS, If you take on a full-time yipee, Lars will compensate correspondingly in his hourly rate: 1500/hr vs 2100 (Prices do not include DK VAT)
A far fetched idea as mentioned, currently I don't have a full-time yipee to spare for your project - but I do have two part time employees who work very well together, they are working with us two days per week (Wednesdays and Fridays), and we could potentially start them up on short notice (Wed+Fri). However, these two boys are due for 12 weeks full-time internships in January/February/March, so in these three months they are off from school, and we would potentially be able to offer them full-time, during that period. Provided that the setup you have can double as their internship project - of which I'm sure it can. (they are both enrolled at Bachelor programme in Computer Science at Copenhagen Business Academy). These two boys are highly talented they would not need much guidance from me - I've worked with them for well over a year now. Initially through a 3 month internship where they developed a time-log extension for git, and since then as part time (â‰ˆ15 hrs/week) employees in Prolike. Note that I haven't presented this idea for them yet - an idea that Louise actually came up with - , but I know they are due for internship in January, I have a feeling they would a setup like this.
Load: as we agree
Cost: 600/hr (not including DK VAT) I'll still offer you a BONUS on my hourly rate if we aim for 100+ hrs/month
As much as I'd like for the yipees to join you project, I'd still like to stress, that constituting a clear ownership of the concept of continuous improvement and optimization inside your development team is ...priceless. But no need to mention, you know already.

A looong mail indead, but you should pick and hack from it as you please - looking forward to hear if you find any of it useful.

Cheers
